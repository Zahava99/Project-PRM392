import 'dart:convert';
import 'package:http/http.dart' as http;
import '/backend/api_service/api_service_chat.dart';
import '/backend/schema/structs/index.dart';
import '/backend/services/chat_history_service.dart';

class ChatbotService {
  // API endpoints
  static const String _chatbotProcessEndpoint = '/api/Chatbot/process';
  static const String _chatbotProcessWithHistoryEndpoint = '/api/Chatbot/process-with-history';
  static const String _chatbotSearchEndpoint = '/api/Chatbot/search-products';
  static const String _chatbotResetEndpoint = '/api/Chatbot/reset-context';
  static const String _chatbotImageEndpoint = '/api/Chatbot/process-with-image';

  /// X·ª≠ l√Ω tin nh·∫Øn chatbot v·ªõi chat history
  static Future<Map<String, dynamic>> processMessageWithHistory(
    String message, {
    String? sessionId,
    int? userId,
    bool saveToHistory = true,
  }) async {
    print('üîÑ processMessageWithHistory called:');
    print('  üìù Message: $message');
    print('  üÜî Session ID: $sessionId');
    print('  üë§ User ID: $userId');
    print('  üíæ Save to history: $saveToHistory');

    try {
      final requestData = {
        'message': message,
        'sessionId': sessionId,
        'userId': userId,
        'isProductQuery': false,
        'context': null,
      };

      print('üöÄ Calling backend process-with-history endpoint...');
      final response = await http.post(
        Uri.parse('${ApiServiceChat.baseUrl}$_chatbotProcessWithHistoryEndpoint'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode(requestData),
      );
      
      print('üì° Backend response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Backend processing successful');
        
        // X·ª≠ l√Ω response data
        final products = <ProductStruct>[];
        if (data['products'] != null) {
          for (var productData in data['products']) {
            try {
              final product = ProductStruct.fromMap(productData);
              products.add(product);
            } catch (e) {
              print('‚ùå Error parsing product: $e');
              continue;
            }
          }
        }

        return {
          'success': true,
          'message': data['message'] ?? 'No response',
          'products': products,
          'hasProducts': data['hasProducts'] ?? false,
          'shouldSendToAPI': data['shouldSendToAPI'] ?? false,
          'context': data['context'],
        };
      } else {
        print('‚ùå Backend API error: ${response.statusCode}');
        print('üìÑ Response body: ${response.body}');
        return {
          'success': false,
          'message': 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn.',
          'products': <ProductStruct>[],
          'hasProducts': false,
          'shouldSendToAPI': false,
          'error': 'API Error: ${response.statusCode}',
        };
      }
    } catch (e) {
      print('üí• Error in processMessageWithHistory: $e');
      return {
        'success': false,
        'message': 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi server.',
        'products': <ProductStruct>[],
        'hasProducts': false,
        'shouldSendToAPI': false,
        'error': e.toString(),
      };
    }
  }

  /// X·ª≠ l√Ω tin nh·∫Øn chatbot (method g·ªëc)
  static Future<Map<String, dynamic>> processMessage(
    String message, {
    String? sessionId,
    int? userId,
  }) async {
    try {
      final requestData = {
        'message': message,
        'sessionId': sessionId,
        'userId': userId,
        'isProductQuery': false,
        'context': null,
      };

      final response = await http.post(
        Uri.parse('${ApiServiceChat.baseUrl}$_chatbotProcessEndpoint'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode(requestData),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        // X·ª≠ l√Ω response data
        final products = <ProductStruct>[];
        if (data['products'] != null) {
          for (var productData in data['products']) {
            try {
              final product = ProductStruct.fromMap(productData);
              products.add(product);
            } catch (err) {
              print('Error mapping product: $err');
            }
          }
      }
      
      return {
          'message': data['message'] ?? 'C√≥ l·ªói x·∫£y ra',
        'products': products,
          'hasProducts': data['hasProducts'] ?? false,
          'shouldSendToAPI': data['shouldSendToAPI'] ?? false,
          'isSearchResult': data['isSearchResult'] ?? false,
          'similarProducts': data['similarProducts'] ?? [],
          'hasSimilarProducts': data['hasSimilarProducts'] ?? false,
          'context': data['context'],
          'success': data['success'] ?? true,
        };
      } else {
        print('API Error: ${response.statusCode} - ${response.body}');
        return {
          'message': 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.',
          'products': <ProductStruct>[],
          'hasProducts': false,
          'shouldSendToAPI': false,
          'isSearchResult': false,
          'similarProducts': [],
          'hasSimilarProducts': false,
          'success': false,
        };
      }
    } catch (e) {
      print('Error calling chatbot API: $e');
      return {
        'message': 'ƒê√£ x·∫£y ra l·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.',
        'products': <ProductStruct>[],
        'hasProducts': false,
        'shouldSendToAPI': false,
        'isSearchResult': false,
        'similarProducts': [],
        'hasSimilarProducts': false,
        'success': false,
      };
    }
  }

  /// X·ª≠ l√Ω tin nh·∫Øn v·ªõi h√¨nh ·∫£nh
  static Future<Map<String, dynamic>> processMessageWithImage(
    String message,
    String imageBase64, {
    String? sessionId,
    int? userId,
  }) async {
    try {
      final requestData = {
        'message': message,
        'sessionId': sessionId,
        'userId': userId,
        'imageBase64': imageBase64,
      };

      final response = await http.post(
        Uri.parse('${ApiServiceChat.baseUrl}$_chatbotImageEndpoint'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode(requestData),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        return {
          'message': data['message'] ?? 'C√≥ l·ªói x·∫£y ra',
          'products': <ProductStruct>[],
          'hasProducts': false,
          'shouldSendToAPI': false,
          'isSearchResult': false,
          'similarProducts': [],
          'hasSimilarProducts': false,
          'context': data['context'],
          'success': data['success'] ?? true,
        };
      } else {
        print('API Error: ${response.statusCode} - ${response.body}');
        return {
          'message': 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh c·ªßa b·∫°n l√∫c n√†y.',
          'products': <ProductStruct>[],
        'hasProducts': false,
          'success': false,
      };
      }
    } catch (e) {
      print('Error calling image analysis API: $e');
      return {
        'message': 'ƒê√£ x·∫£y ra l·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.',
        'products': <ProductStruct>[],
        'hasProducts': false,
        'success': false,
      };
    }
  }

  /// T√¨m ki·∫øm s·∫£n ph·∫©m
  static Future<List<ProductStruct>> searchProducts(String query) async {
    try {
      final requestData = {'query': query};

      final response = await http.post(
        Uri.parse('${ApiServiceChat.baseUrl}$_chatbotSearchEndpoint'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode(requestData),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final products = <ProductStruct>[];
        
        if (data['products'] != null) {
          for (var productData in data['products']) {
            try {
              final product = ProductStruct.fromMap(productData);
              products.add(product);
            } catch (err) {
              print('Error mapping product: $err');
            }
          }
        }
        
        return products;
    } else {
        print('Search API Error: ${response.statusCode} - ${response.body}');
        return [];
      }
    } catch (e) {
      print('Error calling search products API: $e');
      return [];
    }
  }

  /// Reset context phi√™n chat
  static Future<bool> resetContext(String sessionId) async {
    try {
      final requestData = {'sessionId': sessionId};

      final response = await http.post(
        Uri.parse('${ApiServiceChat.baseUrl}$_chatbotResetEndpoint'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode(requestData),
      );

      if (response.statusCode == 200) {
        return true;
      } else {
        print('Reset context API Error: ${response.statusCode} - ${response.body}');
        return false;
      }
    } catch (e) {
      print('Error calling reset context API: $e');
      return false;
    }
    }

  /// Ki·ªÉm tra xem tin nh·∫Øn c√≥ li√™n quan ƒë·∫øn s·∫£n ph·∫©m kh√¥ng (ƒë∆°n gi·∫£n h√≥a)
  static bool isProductRelated(String message) {
    final productKeywords = [
      's·∫£n ph·∫©m', 'm·ªπ ph·∫©m', 'kem', 'serum', 't·∫©y trang', 'r·ª≠a m·∫∑t',
      'd∆∞·ª°ng ·∫©m', 'ch·ªëng n·∫Øng', 'trang ƒëi·ªÉm', 'son', 'ph·∫•n', 'mascara',
      'gi·ªõi thi·ªáu', 'g·ª£i √Ω', 'khuy·∫øn ngh·ªã', 't∆∞ v·∫•n', 'skincare', 'makeup'
    ];
    
    final lowerMessage = message.toLowerCase();
    return productKeywords.any((keyword) => lowerMessage.contains(keyword));
    }

  /// T·∫°o session ID m·ªõi
  static String generateSessionId() {
    return DateTime.now().millisecondsSinceEpoch.toString();
  }

  /// Utility method ƒë·ªÉ x·ª≠ l√Ω enhanced message (t∆∞∆°ng th√≠ch v·ªõi code c≈©)
  static Future<Map<String, dynamic>> processMessageEnhanced(String message, {String? sessionId, int? userId}) async {
    return await processMessage(message, sessionId: sessionId, userId: userId);
    }

  /// Placeholder methods ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈© (s·∫Ω g·ªçi API)
  static Future<List<ProductStruct>> getRelevantProducts(String message) async {
    return await searchProducts(message);
  }

  /// T√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± (s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü backend)
  static Future<Map<String, dynamic>> findSimilarProducts(String productName, String message) async {
    // G·ªçi processMessage v·ªõi message ch·ª©a th√¥ng tin v·ªÅ s·∫£n ph·∫©m t∆∞∆°ng t·ª±
    final enhancedMessage = 't√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± $productName: $message';
    return await processMessage(enhancedMessage);
  }

  /// T√¨m th√™m s·∫£n ph·∫©m kh√°c (s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü backend)
  static Future<Map<String, dynamic>> findMoreSimilarProducts(String message) async {
    return await processMessage(message);
  }
} 