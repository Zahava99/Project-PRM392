import 'package:http/http.dart' as http;

class GoogleSearchService {
  // B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng API key mi·ªÖn ph√≠ t·ª´ Google Custom Search
  // Ho·∫∑c s·ª≠ d·ª•ng web scraping ƒë∆°n gi·∫£n (kh√¥ng c·∫ßn API key)
  static const String _userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';

  /// T√¨m ki·∫øm s·∫£n ph·∫©m skincare tr√™n Google
  static Future<List<Map<String, String>>> searchSkincareProducts(String query) async {
    try {
      // T·∫°o query t√¨m ki·∫øm t·ªëi ∆∞u
      final searchQuery = '$query skincare products reviews best';
      final encodedQuery = Uri.encodeComponent(searchQuery);
      
      // S·ª≠ d·ª•ng Google Search v·ªõi region=vn ƒë·ªÉ c√≥ k·∫øt qu·∫£ ph√π h·ª£p v·ªõi Vi·ªát Nam
      final url = 'https://www.google.com/search?q=$encodedQuery&gl=vn&hl=vi&num=10';
      
      final response = await http.get(
        Uri.parse(url),
        headers: {
          'User-Agent': _userAgent,
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language': 'vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3',
          'Accept-Encoding': 'gzip, deflate',
          'Connection': 'keep-alive',
        },
      );

      if (response.statusCode == 200) {
        return _parseSearchResults(response.body, query);
      } else {
        print('Google search failed with status: ${response.statusCode}');
        return _getFallbackResults(query);
      }
    } catch (e) {
      print('Error searching Google: $e');
      return _getFallbackResults(query);
    }
  }

  /// Parse k·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ HTML c·ªßa Google
  static List<Map<String, String>> _parseSearchResults(String html, String originalQuery) {
    final results = <Map<String, String>>[];
    
    try {
      // T√¨m c√°c link v√† title t·ª´ k·∫øt qu·∫£ Google Search
      // ƒê√¢y l√† c√°ch ƒë∆°n gi·∫£n, trong th·ª±c t·∫ø c√≥ th·ªÉ s·ª≠ d·ª•ng HTML parser chuy√™n nghi·ªáp
      final titleRegex = RegExp(r'<h3[^>]*>([^<]+)</h3>', multiLine: true);
      final linkRegex = RegExp(r'href="([^"]+)"', multiLine: true);
      
      final titleMatches = titleRegex.allMatches(html);
      final linkMatches = linkRegex.allMatches(html);
      
      int count = 0;
      for (final titleMatch in titleMatches) {
        if (count >= 5) break; // Gi·ªõi h·∫°n 5 k·∫øt qu·∫£
        
        final title = titleMatch.group(1)?.replaceAll(RegExp(r'<[^>]*>'), '') ?? '';
        if (title.isNotEmpty && _isRelevantTitle(title, originalQuery)) {
          results.add({
            'title': title,
            'description': 'T√¨m hi·ªÉu th√™m v·ªÅ $title v√† c√°c s·∫£n ph·∫©m skincare t∆∞∆°ng t·ª±',
            'source': 'Google Search',
          });
          count++;
        }
      }
    } catch (e) {
      print('Error parsing search results: $e');
    }
    
    if (results.isEmpty) {
      return _getFallbackResults(originalQuery);
    }
    
    return results;
  }

  /// Ki·ªÉm tra xem title c√≥ li√™n quan ƒë·∫øn skincare kh√¥ng
  static bool _isRelevantTitle(String title, String query) {
    final lowerTitle = title.toLowerCase();
    final lowerQuery = query.toLowerCase();
    
    // Lo·∫°i b·ªè c√°c k·∫øt qu·∫£ kh√¥ng mong mu·ªën
    final excludeKeywords = ['video', 'youtube', 'tiktok', 'facebook', 'instagram', 'ads', 'qu·∫£ng c√°o'];
    if (excludeKeywords.any((keyword) => lowerTitle.contains(keyword))) {
      return false;
    }
    
    // Ki·ªÉm tra t·ª´ kh√≥a li√™n quan ƒë·∫øn skincare
    final skincareKeywords = [
      'skincare', 'kem', 'serum', 'toner', 'moisturizer', 'cleanser', 'chƒÉm s√≥c da',
      'd∆∞·ª°ng da', 'l√†m ƒë·∫πp', 'm·ªπ ph·∫©m', 'beauty', 'cosmetics', 'skin care'
    ];
    
    return skincareKeywords.any((keyword) => lowerTitle.contains(keyword)) ||
           lowerQuery.split(' ').any((word) => word.length > 2 && lowerTitle.contains(word));
  }

  /// Tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh khi kh√¥ng th·ªÉ t√¨m ki·∫øm
  static List<Map<String, String>> _getFallbackResults(String query) {
    return [
      {
        'title': 'T√¨m hi·ªÉu th√™m v·ªÅ $query',
        'description': 'Kh√°m ph√° c√°c s·∫£n ph·∫©m $query ph·ªï bi·∫øn v√† ƒë∆∞·ª£c ƒë√°nh gi√° cao t·ª´ c√°c th∆∞∆°ng hi·ªáu uy t√≠n',
        'source': 'G·ª£i √Ω t·ª´ Cosmotopia',
      },
      {
        'title': 'So s√°nh c√°c s·∫£n ph·∫©m $query',
        'description': 'ƒê·ªçc review v√† so s√°nh c√°c s·∫£n ph·∫©m $query ƒë·ªÉ ch·ªçn ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t',
        'source': 'G·ª£i √Ω t·ª´ Cosmotopia',
      },
      {
        'title': 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng $query',
        'description': 'T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng $query ƒë√∫ng c√°ch ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£ t·ªët nh·∫•t cho l√†n da',
        'source': 'G·ª£i √Ω t·ª´ Cosmotopia',
      },
    ];
  }

  /// T·∫°o tin nh·∫Øn ph·∫£n h·ªìi v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm Google
  static String createSearchResponse(List<Map<String, String>> searchResults, String originalQuery) {
    if (searchResults.isEmpty) {
      return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t√¨m th√™m th√¥ng tin v·ªÅ $originalQuery l√∫c n√†y. B·∫°n c√≥ th·ªÉ th·ª≠ t√¨m ki·∫øm tr·ª±c ti·∫øp tr√™n Google ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n.";
    }

    String response = "D·ª±a tr√™n t√¨m ki·∫øm tr√™n Google, ƒë√¢y l√† th√™m th√¥ng tin v·ªÅ $originalQuery:\n\n";
    
    for (int i = 0; i < searchResults.length; i++) {
      final result = searchResults[i];
      response += "${i + 1}. **${result['title']}**\n";
      response += "   ${result['description']}\n";
      response += "   _Ngu·ªìn: ${result['source']}_\n\n";
    }
    
    response += "üí° **L∆∞u √Ω**: Th√¥ng tin tr√™n ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ internet. B·∫°n n√™n tham kh·∫£o √Ω ki·∫øn chuy√™n gia v√† ƒë·ªçc k·ªπ th√†nh ph·∫ßn tr∆∞·ªõc khi s·ª≠ d·ª•ng s·∫£n ph·∫©m m·ªõi.\n\n";
    response += "N·∫øu b·∫°n mu·ªën mua s·∫£n ph·∫©m, h√£y quay l·∫°i xem c√°c s·∫£n ph·∫©m c√≥ s·∫µn t·∫°i Cosmotopia nh√©!";
    
    return response;
  }

  /// Nh·∫≠n di·ªán y√™u c·∫ßu t√¨m ki·∫øm th√™m th√¥ng tin
  static bool isSearchMoreRequest(String message) {
    final lowerMessage = message.toLowerCase();
    final searchKeywords = [
      'th√™m', 'n·ªØa', 'kh√°c', 't√¨m ki·∫øm', 'search', 'google', 't√¨m hi·ªÉu',
      'th√¥ng tin', 'chi ti·∫øt', 'more', 'additional', 'other', 'another',
      'c√≤n g√¨', 'g√¨ kh√°c', 't√¨m th√™m', 'cho t√¥i th√™m', 'mu·ªën bi·∫øt th√™m',
      'c√°c s·∫£n ph·∫©m kh√°c', 's·∫£n ph·∫©m kh√°c', 'option kh√°c', 'l·ª±a ch·ªçn kh√°c',
      'c√≥ g√¨ kh√°c', 'c√≤n c√≥ g√¨', 'c√≥ th√™m g√¨', 'show th√™m'
    ];
    
    return searchKeywords.any((keyword) => lowerMessage.contains(keyword));
  }
} 