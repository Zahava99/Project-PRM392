using Cosmetics.DTO.Chatbot;
using Cosmetics.Interfaces;
using Cosmetics.Models;
using Microsoft.Extensions.Caching.Memory;
using System.Globalization;
using System.Text.RegularExpressions;

namespace Cosmetics.Service.Chatbot
{
    public interface IChatbotService
    {
        Task<ChatbotResponseDto> ProcessMessage(ChatbotRequestDto request);
        Task<ChatbotResponseDto> ProcessMessageWithHistory(ChatbotRequestDto request);
        Task<List<Cosmetics.Models.Product>> GetRelevantProducts(string message);
        void ResetContext(string sessionId);
    }

    public class ChatbotService : IChatbotService
    {
        private readonly IProductRepository _productRepository;
        private readonly IProductService _productService;
        private readonly IMemoryCache _cache;
        private readonly ILogger<ChatbotService> _logger;
        private readonly IChatService _chatService;

        // T·ª´ kh√≥a ƒë·ªÉ nh·∫≠n di·ªán c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m
        private readonly List<string> _productKeywords = new List<string>
        {
            "s·∫£n ph·∫©m", "m·ªπ ph·∫©m", "kem", "serum", "t·∫©y trang", "r·ª≠a m·∫∑t",
            "d∆∞·ª°ng ·∫©m", "ch·ªëng n·∫Øng", "trang ƒëi·ªÉm", "son", "ph·∫•n", "mascara",
            "gi·ªõi thi·ªáu", "g·ª£i √Ω", "khuy·∫øn ngh·ªã", "t∆∞ v·∫•n", "mua", "b√°n",
            "t·ªët", "hi·ªáu qu·∫£", "ph√π h·ª£p", "da", "t√≥c", "m√¥i", "m·∫Øt",
            "ch·ªëng l√£o h√≥a", "tr·∫Øng da", "d∆∞·ª°ng da", "l√†m s·∫°ch", "t·∫©y t·∫ø b√†o ch·∫øt",
            "d∆∞·ª°ng ·∫©m", "se kh√≠t l·ªó ch√¢n l√¥ng", "gi·∫£m m·ª•n", "l√†m m·ªù v·∫øt th√¢m",
            "ch·ªëng n·∫Øng", "d∆∞·ª°ng t√≥c", "g·ªôi ƒë·∫ßu", "x·∫£ t√≥c", "d∆∞·ª°ng m√¥i",
            "d∆∞·ª°ng m·∫Øt", "che khuy·∫øt ƒëi·ªÉm", "n·ªÅn", "ph·∫•n ph·ªß", "ph·∫•n m√° h·ªìng",
            "k·∫ª m·∫Øt", "k·∫ª m√¥i", "ƒë√°nh ph·∫•n", "t·∫°o ki·ªÉu t√≥c", "nhu·ªôm t√≥c",
            "u·ªën t√≥c", "du·ªói t√≥c", "c·∫Øt t√≥c", "l√†m m√≥ng", "s∆°n m√≥ng",
            "d∆∞·ª°ng m√≥ng", "t·∫©y da ch·∫øt", "kem n·ªÅn", "moisturizer", "cleanser"
        };

        // T·ª´ kh√≥a ƒë·ªÉ nh·∫≠n di·ªán c√°c lo·∫°i c√¢u h·ªèi kh√°c nhau
        private readonly Dictionary<string, List<string>> _questionTypeKeywords = new Dictionary<string, List<string>>
        {
            { "price", new List<string> { "gi√°", "bao nhi√™u ti·ªÅn", "gi√° c·∫£", "chi ph√≠", "price", "cost", "ƒë·∫Øt", "r·∫ª", "ti·ªÅn" } },
            { "brand", new List<string> { "th∆∞∆°ng hi·ªáu", "h√£ng", "brand", "nh√£n hi·ªáu", "c·ªßa h√£ng n√†o" } },
            { "comparison", new List<string> { "so s√°nh", "kh√°c nhau", "gi·ªëng nhau", "t·ªët h∆°n", "compare", "vs", "kh√°c g√¨" } },
            { "usage", new List<string> { "c√°ch d√πng", "s·ª≠ d·ª•ng", "how to use", "d√πng nh∆∞ th·∫ø n√†o", "thoa", "apply" } },
            { "benefits", new List<string> { "c√¥ng d·ª•ng", "t√°c d·ª•ng", "benefits", "hi·ªáu qu·∫£", "l·ª£i √≠ch", "c√≥ t√°c d·ª•ng g√¨" } },
            { "ingredients", new List<string> { "th√†nh ph·∫ßn", "ingredients", "ch·ª©a g√¨", "c√≥ ch·ª©a" } },
            { "suitability", new List<string> { "ph√π h·ª£p", "suitable", "cho da", "d√†nh cho", "ai n√™n d√πng" } }
        };

        // T·ª´ kh√≥a ƒë·ªÉ nh·∫≠n di·ªán lo·∫°i da
        private readonly Dictionary<string, List<string>> _skinTypeKeywords = new Dictionary<string, List<string>>
        {
            { "da kh√¥", new List<string> { "da kh√¥", "kh√¥", "bong tr√≥c", "n·ª©t n·∫ª", "thi·∫øu ·∫©m" } },
            { "da d·∫ßu", new List<string> { "da d·∫ßu", "d·∫ßu", "b√≥ng nh·ªùn", "m·ª•n", "l·ªó ch√¢n l√¥ng to" } },
            { "da h·ªón h·ª£p", new List<string> { "da h·ªón h·ª£p", "h·ªón h·ª£p", "v·ª´a kh√¥ v·ª´a d·∫ßu", "t-zone" } },
            { "da nh·∫°y c·∫£m", new List<string> { "da nh·∫°y c·∫£m", "nh·∫°y c·∫£m", "d·ªã ·ª©ng", "ƒë·ªè", "ng·ª©a" } },
            { "da th∆∞·ªùng", new List<string> { "da th∆∞·ªùng", "b√¨nh th∆∞·ªùng", "c√¢n b·∫±ng" } }
        };

        // T·ª´ kh√≥a ƒë·ªÉ nh·∫≠n di·ªán m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
        private readonly Dictionary<string, List<string>> _purposeKeywords = new Dictionary<string, List<string>>
        {
            { "ch·ªëng l√£o h√≥a", new List<string> { "ch·ªëng l√£o h√≥a", "tr·∫ª h√≥a", "n·∫øp nhƒÉn", "l√£o h√≥a" } },
            { "d∆∞·ª°ng ·∫©m", new List<string> { "d∆∞·ª°ng ·∫©m", "c·∫•p ·∫©m", "gi·ªØ ·∫©m", "kh√¥" } },
            { "l√†m tr·∫Øng", new List<string> { "l√†m tr·∫Øng", "tr·∫Øng da", "s√°ng da", "ƒë·ªÅu m√†u" } },
            { "ch·ªëng n·∫Øng", new List<string> { "ch·ªëng n·∫Øng", "b·∫£o v·ªá", "uv", "tia c·ª±c t√≠m" } },
            { "tr·ªã m·ª•n", new List<string> { "tr·ªã m·ª•n", "gi·∫£m m·ª•n", "kh√°ng khu·∫©n", "se kh√≠t l·ªó ch√¢n l√¥ng" } },
            { "l√†m s·∫°ch", new List<string> { "l√†m s·∫°ch", "t·∫©y trang", "r·ª≠a m·∫∑t", "t·∫©y t·∫ø b√†o ch·∫øt" } }
        };

        public ChatbotService(IProductRepository productRepository, IProductService productService, IMemoryCache cache, ILogger<ChatbotService> logger, IChatService chatService)
        {
            _productRepository = productRepository;
            _productService = productService;
            _cache = cache;
            _logger = logger;
            _chatService = chatService;
        }

        public async Task<ChatbotResponseDto> ProcessMessage(ChatbotRequestDto request)
        {
            try
            {
                var sessionId = request.SessionId ?? Guid.NewGuid().ToString();
                var context = GetSessionContext(sessionId);

                // X·ª≠ l√Ω c√°c t√¨nh hu·ªëng ƒë·∫∑c bi·ªát tr∆∞·ªõc
                var specialResponse = HandleSpecialCases(request.Message);
                if (specialResponse != null)
                {
                    return new ChatbotResponseDto
                    {
                        Message = specialResponse,
                        Products = new List<Cosmetics.Models.Product>(),
                        HasProducts = false,
                        Context = sessionId
                    };
                }

                // Ki·ªÉm tra xem c√≥ ph·∫£i y√™u c·∫ßu t√¨m ki·∫øm th√™m kh√¥ng
                if (IsSearchMoreRequest(request.Message) && !string.IsNullOrEmpty(context.LastProductQuery))
                {
                    return await HandleSearchMoreRequest(request.Message, context.LastProductQuery, sessionId);
                }

                // Ki·ªÉm tra y√™u c·∫ßu t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±
                if (IsSimilarProductRequest(request.Message) && context.LastProductResults?.Any() == true)
                {
                    return await FindSimilarProducts(context.LastProductResults.First().Name, sessionId);
                }

                // Ki·ªÉm tra y√™u c·∫ßu t√¨m th√™m s·∫£n ph·∫©m kh√°c
                if (IsSearchAnotherMoreRequest(request.Message) && context.LastSimilarProducts?.Any() == true)
                {
                    return await FindMoreSimilarProducts(request.Message, sessionId);
                }

                if (IsProductRelated(request.Message))
                {
                    var products = await GetRelevantProducts(request.Message);
                    
                    // Ph√¢n t√≠ch lo·∫°i c√¢u h·ªèi v√† t·∫°o response ph√π h·ª£p
                    var questionType = DetectQuestionType(request.Message);
                    var response = CreateSpecializedResponse(products, questionType, request.Message);

                    // L∆∞u context
                    context.LastProductQuery = request.Message;
                    context.LastProductResults = products;
                    context.LastQueryTime = DateTime.UtcNow;
                    SaveSessionContext(sessionId, context);

                    return new ChatbotResponseDto
                    {
                        Message = response,
                        Products = products,
                        HasProducts = products.Any(),
                        Context = sessionId
                    };
                }
                else
                {
                    // N·∫øu kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m, chuy·ªÉn ƒë·∫øn AI chatbot
                    return new ChatbotResponseDto
                    {
                        Message = "T√¥i s·∫Ω chuy·ªÉn c√¢u h·ªèi n√†y ƒë·∫øn h·ªá th·ªëng AI ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t.",
                        Products = new List<Cosmetics.Models.Product>(),
                        HasProducts = false,
                        ShouldSendToAPI = true,
                        Context = sessionId
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing chatbot message: {Message}", request.Message);
                return new ChatbotResponseDto
                {
                    Success = false,
                    ErrorMessage = "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
                    Message = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y l√∫c n√†y.",
                    Products = new List<Cosmetics.Models.Product>(),
                    HasProducts = false
                };
            }
        }

        public async Task<ChatbotResponseDto> ProcessMessageWithHistory(ChatbotRequestDto request)
        {
            try
            {
                _logger.LogInformation("üöÄ ProcessMessageWithHistory called - UserId: {UserId}, SessionId: {SessionId}, Message: {Message}", 
                    request.UserId, request.SessionId, request.Message);

                // Validate request
                if (request.UserId == null || string.IsNullOrEmpty(request.SessionId))
                {
                    _logger.LogError("‚ùå Invalid request: UserId={UserId}, SessionId={SessionId}", request.UserId, request.SessionId);
                    throw new ArgumentException("UserId and SessionId are required for chat history");
                }

                // Parse SessionId as Guid
                if (!Guid.TryParse(request.SessionId, out var sessionId))
                {
                    _logger.LogError("‚ùå Invalid SessionId format: {SessionId}", request.SessionId);
                    throw new ArgumentException("Invalid SessionId format");
                }

                // 1. Save user message to database
                var currentTime = DateTime.UtcNow;
                _logger.LogInformation("üíæ Saving user message to database at UTC: {UtcTime}, Local: {LocalTime}", 
                    currentTime.ToString("yyyy-MM-dd HH:mm:ss.fff"), 
                    currentTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
                    
                var userMessageRequest = new SaveMessageRequestDto
                {
                    SessionId = sessionId,
                    Content = request.Message,
                    IsFromUser = true,
                    RecommendedProductIds = null
                };

                var savedUserMessage = await _chatService.SaveMessageAsync(userMessageRequest);
                _logger.LogInformation("‚úÖ User message saved with ID: {MessageId}, SentAt: {SentAt}", 
                    savedUserMessage.MessageId, savedUserMessage.SentAt.ToString("yyyy-MM-dd HH:mm:ss.fff"));

                // 2. Process message to get bot response
                _logger.LogInformation("ü§ñ Processing message through chatbot logic...");
                var botResponse = await ProcessMessage(request);

                // 3. Save bot response to database if processing was successful
                if (botResponse.Success)
                {
                    _logger.LogInformation("üíæ Saving bot response to database...");
                    
                    // Prepare product recommendations if any
                    var recommendedProductIds = botResponse.Products?.Select(p => p.ProductId).ToList();

                    var botMessageRequest = new SaveMessageRequestDto
                    {
                        SessionId = sessionId,
                        Content = botResponse.Message,
                        IsFromUser = false,
                        RecommendedProductIds = recommendedProductIds
                    };

                    var savedBotMessage = await _chatService.SaveMessageAsync(botMessageRequest);
                    _logger.LogInformation("‚úÖ Bot response saved with ID: {MessageId}", savedBotMessage.MessageId);
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è Bot response was not successful, not saving to database");
                }

                _logger.LogInformation("üéâ ProcessMessageWithHistory completed successfully");
                return botResponse;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• Error in ProcessMessageWithHistory: {Message}", ex.Message);
                return new ChatbotResponseDto
                {
                    Success = false,
                    ErrorMessage = "L·ªói l∆∞u l·ªãch s·ª≠ chat",
                    Message = "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l∆∞u tin nh·∫Øn.",
                    Products = new List<Cosmetics.Models.Product>(),
                    HasProducts = false
                };
            }
        }

        public async Task<List<Cosmetics.Models.Product>> GetRelevantProducts(string message)
        {
            try
            {
                // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi Brand relation included
                var allProducts = await _productService.GetAllProductsAsync(pageNumber: 1, pageSize: 1000);
                
                // L·ªçc s·∫£n ph·∫©m ph√π h·ª£p
                return FilterRelevantProducts(allProducts, message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting relevant products for message: {Message}", message);
                return new List<Cosmetics.Models.Product>();
            }
        }

        private bool IsProductRelated(string message)
        {
            var lowerMessage = message.ToLower();
            return _productKeywords.Any(keyword => lowerMessage.Contains(keyword));
        }

        /// Ph√¢n t√≠ch lo·∫°i c√¢u h·ªèi
        private string DetectQuestionType(string message)
        {
            var lowerMessage = message.ToLower();
            foreach (var entry in _questionTypeKeywords)
            {
                if (entry.Value.Any(keyword => lowerMessage.Contains(keyword)))
                {
                    return entry.Key;
                }
            }
            return "general";
        }

        /// X·ª≠ l√Ω c√°c t√¨nh hu·ªëng ƒë·∫∑c bi·ªát
        private string? HandleSpecialCases(string message)
        {
            var lowerMessage = message.ToLower().Trim();

            // C√¢u ch√†o h·ªèi
            var greetings = new[] { "xin ch√†o", "hello", "hi", "ch√†o", "hey", "good morning", "good afternoon" };
            if (greetings.Any(g => lowerMessage.Contains(g)))
            {
                return "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m m·ªπ ph·∫©m ph√π h·ª£p. B·∫°n c·∫ßn t∆∞ v·∫•n g√¨?";
            }

            // C·∫£m ∆°n
            var thanks = new[] { "c·∫£m ∆°n", "thank you", "thanks", "c√°m ∆°n", "tks" };
            if (thanks.Any(t => lowerMessage.Contains(t)))
            {
                return "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n.";
            }

            // C√¢u h·ªèi v·ªÅ store/c·ª≠a h√†ng
            var storeQuestions = new[] { "c·ª≠a h√†ng", "store", "ƒë·ªãa ch·ªâ", "li√™n h·ªá", "hotline", "·ªü ƒë√¢u" };
            if (storeQuestions.Any(s => lowerMessage.Contains(s)))
            {
                return "Cosmotopia l√† c·ª≠a h√†ng m·ªπ ph·∫©m tr·ª±c tuy·∫øn. B·∫°n c√≥ th·ªÉ mua s·∫Øm qua ·ª©ng d·ª•ng n√†y. C·∫ßn h·ªó tr·ª£ g√¨ kh√°c?";
            }

            // C√¢u h·ªèi v·ªÅ giao h√†ng
            var shippingQuestions = new[] { "giao h√†ng", "ship", "v·∫≠n chuy·ªÉn", "delivery", "bao l√¢u", "khi n√†o nh·∫≠n" };
            if (shippingQuestions.Any(s => lowerMessage.Contains(s)))
            {
                return "Ch√∫ng t√¥i giao h√†ng to√†n qu·ªëc trong 2-3 ng√†y l√†m vi·ªác. Mi·ªÖn ph√≠ ship ƒë∆°n t·ª´ 200.000ƒë.";
            }

            // C√¢u h·ªèi v·ªÅ thanh to√°n
            var paymentQuestions = new[] { "thanh to√°n", "payment", "tr·∫£ ti·ªÅn", "pay", "ti·ªÅn m·∫∑t", "chuy·ªÉn kho·∫£n" };
            if (paymentQuestions.Any(p => lowerMessage.Contains(p)))
            {
                return "Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n qua th·∫ª, chuy·ªÉn kho·∫£n v√† ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng.";
            }

            // C√¢u h·ªèi v·ªÅ ƒë·ªïi tr·∫£
            var returnQuestions = new[] { "ƒë·ªïi tr·∫£", "return", "ho√†n ti·ªÅn", "refund", "kh√¥ng ∆∞ng" };
            if (returnQuestions.Any(r => lowerMessage.Contains(r)))
            {
                return "Ch√∫ng t√¥i h·ªó tr·ª£ ƒë·ªïi tr·∫£ trong 7 ng√†y n·∫øu s·∫£n ph·∫©m c√≤n nguy√™n seal.";
            }

            return null; // Kh√¥ng ph·∫£i t√¨nh hu·ªëng ƒë·∫∑c bi·ªát
        }

        /// T·∫°o response d·ª±a tr√™n lo·∫°i c√¢u h·ªèi
        private string CreateSpecializedResponse(List<Cosmetics.Models.Product> products, string questionType, string originalMessage)
        {
            if (!products.Any())
            {
                return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. Vui l√≤ng th·ª≠ v·ªõi t·ª´ kh√≥a kh√°c.";
            }

            var response = "";
            var limitedProducts = products.Take(3).ToList(); // Gi·ªõi h·∫°n 3 s·∫£n ph·∫©m cho response ng·∫Øn g·ªçn

            switch (questionType)
            {
                case "price":
                    response = "Th√¥ng tin gi√° s·∫£n ph·∫©m:\n\n";
                    foreach (var product in limitedProducts)
                    {
                        var price = product.Price.ToString("N0", new CultureInfo("vi-VN"));
                        response += $"- {product.Name}: {price}ƒë\n";
                    }
                    break;

                case "brand":
                    response = "Th√¥ng tin th∆∞∆°ng hi·ªáu:\n\n";
                    foreach (var product in limitedProducts)
                    {
                        var brand = product.Brand?.Name ?? "Ch∆∞a x√°c ƒë·ªãnh";
                        response += $"- {product.Name}: {brand}\n";
                    }
                    break;

                case "benefits":
                    response = "C√¥ng d·ª•ng s·∫£n ph·∫©m:\n\n";
                    foreach (var product in limitedProducts)
                    {
                        var desc = !string.IsNullOrEmpty(product.Description) && product.Description.Length > 60
                            ? product.Description.Substring(0, 60) + "..."
                            : product.Description ?? "Ch∆∞a c√≥ th√¥ng tin chi ti·∫øt";
                        response += $"- {product.Name}: {desc}\n";
                    }
                    break;

                case "suitability":
                    response = "S·∫£n ph·∫©m ph√π h·ª£p:\n\n";
                    var skinType = DetectSkinType(originalMessage);
                    if (skinType != null)
                    {
                        response += $"D√†nh cho {skinType}:\n";
                    }
                    foreach (var product in limitedProducts)
                    {
                        response += $"- {product.Name}\n";
                        if (product.Category?.Name != null)
                        {
                            response += $"  Lo·∫°i: {product.Category.Name}\n";
                        }
                    }
                    break;

                case "usage":
                    response = "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n\n";
                    foreach (var product in limitedProducts)
                    {
                        response += $"- {product.Name}: ";
                        var category = product.Category?.Name?.ToLower() ?? "";
                        if (category.Contains("cleanser") || category.Contains("t·∫©y trang"))
                        {
                            response += "Thoa l√™n da, massage nh·∫π, r·ª≠a s·∫°ch v·ªõi n∆∞·ªõc.\n";
                        }
                        else if (category.Contains("serum"))
                        {
                            response += "Thoa sau b∆∞·ªõc l√†m s·∫°ch, tr∆∞·ªõc kem d∆∞·ª°ng.\n";
                        }
                        else if (category.Contains("moisturizer") || category.Contains("d∆∞·ª°ng ·∫©m"))
                        {
                            response += "Thoa ƒë·ªÅu l√™n da sau serum, massage nh·∫π.\n";
                        }
                        else
                        {
                            response += "S·ª≠ d·ª•ng theo h∆∞·ªõng d·∫´n tr√™n bao b√¨.\n";
                        }
                    }
                    break;

                default:
                    return CreateProductResponse(products, originalMessage);
            }

            response += "\nNh·∫•n v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt.";
            return response;
        }

        private string? DetectSkinType(string message)
        {
            var lowerMessage = message.ToLower();
            foreach (var entry in _skinTypeKeywords)
            {
                if (entry.Value.Any(keyword => lowerMessage.Contains(keyword)))
                {
                    return entry.Key;
                }
            }
            return null;
        }

        private List<string> DetectPurposes(string message)
        {
            var lowerMessage = message.ToLower();
            var purposes = new List<string>();

            foreach (var entry in _purposeKeywords)
            {
                if (entry.Value.Any(keyword => lowerMessage.Contains(keyword)))
                {
                    purposes.Add(entry.Key);
                }
            }

            return purposes;
        }

        private List<Cosmetics.Models.Product> FilterRelevantProducts(List<Cosmetics.Models.Product> products, string message)
        {
            var lowerMessage = message.ToLower();
            var relevantProducts = new List<Cosmetics.Models.Product>();

            // Detect brand name t·ª´ message
            var requestedBrand = DetectBrandFromMessage(lowerMessage);
            
            // Detect purposes t·ª´ message
            var purposes = DetectPurposes(message);

            // ƒê·ªãnh nghƒ©a t·ª´ kh√≥a cho t·ª´ng lo·∫°i s·∫£n ph·∫©m
            var skincareKeywords = new[] { "skincare", "chƒÉm s√≥c da", "d∆∞·ª°ng da", "kem", "serum", "toner", "cleanser", "moisturizer", "cream", "lotion" };
            var haircareKeywords = new[] { "haircare", "chƒÉm s√≥c t√≥c", "d∆∞·ª°ng t√≥c", "g·ªôi", "x·∫£", "shampoo", "conditioner" };
            var makeupKeywords = new[] { "makeup", "trang ƒëi·ªÉm", "son", "ph·∫•n", "mascara", "foundation", "lipstick" };
            var fragranceKeywords = new[] { "n∆∞·ªõc hoa", "perfume", "fragrance", "cologne" };

            // X√°c ƒë·ªãnh lo·∫°i s·∫£n ph·∫©m ƒë∆∞·ª£c h·ªèi
            bool isSkincareQuery = skincareKeywords.Any(keyword => lowerMessage.Contains(keyword));
            bool isHaircareQuery = haircareKeywords.Any(keyword => lowerMessage.Contains(keyword));
            bool isMakeupQuery = makeupKeywords.Any(keyword => lowerMessage.Contains(keyword));
            bool isFragranceQuery = fragranceKeywords.Any(keyword => lowerMessage.Contains(keyword));

            // T·ª´ kh√≥a chung
            var generalKeywords = new[] { "s·∫£n ph·∫©m", "m·ªπ ph·∫©m", "l√†m ƒë·∫πp", "gi·ªõi thi·ªáu", "t·ªët", "hay", "ch·∫•t l∆∞·ª£ng", "recommend", "g·ª£i √Ω" };
            var isGeneralQuery = generalKeywords.Any(keyword => lowerMessage.Contains(keyword)) &&
                                !isSkincareQuery && !isHaircareQuery && !isMakeupQuery && !isFragranceQuery;

            foreach (var product in products)
            {
                bool isRelevant = false;
                var productName = product.Name.ToLower();
                var productDescription = (product.Description ?? "").ToLower();
                var categoryName = product.Category?.Name?.ToLower() ?? "";
                var brandName = product.Brand?.Name?.ToLower() ?? "";

                // **PRIORITY 1: Brand filtering** - N·∫øu c√≥ brand ƒë∆∞·ª£c specify, ch·ªâ tr·∫£ v·ªÅ products c·ªßa brand ƒë√≥
                if (!string.IsNullOrEmpty(requestedBrand))
                {
                    // Exact brand matching (case-insensitive)
                    var productBrand = product.Brand?.Name?.Trim() ?? "";
                    
                    if (!string.Equals(productBrand, requestedBrand, StringComparison.OrdinalIgnoreCase))
                    {
                        continue; // Skip product if brand doesn't match exactly
                    }
                }

                // **PRIORITY 2: Purpose filtering** - N·∫øu c√≥ purpose ƒë∆∞·ª£c specify, filter theo purpose
                if (purposes.Any())
                {
                    bool matchesPurpose = false;
                    foreach (var purpose in purposes)
                    {
                        if (ProductMatchesPurpose(product, purpose, productName, productDescription, categoryName))
                        {
                            matchesPurpose = true;
                            break;
                        }
                    }
                    if (!matchesPurpose)
                    {
                        continue; // Skip product if purpose doesn't match
                    }
                }

                // **PRIORITY 3: Category filtering**
                // N·∫øu c√≥ brand specified, ch·∫•p nh·∫≠n T·∫§T C·∫¢ products c·ªßa brand ƒë√≥
                if (!string.IsNullOrEmpty(requestedBrand))
                {
                    isRelevant = true; // Brand already filtered, accept all products of that brand
                }
                else if (isSkincareQuery)
                {
                    isRelevant = IsSkincareProduct(productName, productDescription, categoryName);
                }
                else if (isHaircareQuery)
                {
                    isRelevant = IsHaircareProduct(productName, productDescription, categoryName);
                }
                else if (isMakeupQuery)
                {
                    isRelevant = IsMakeupProduct(productName, productDescription, categoryName);
                }
                else if (isFragranceQuery)
                {
                    isRelevant = IsFragranceProduct(productName, productDescription, categoryName);
                }
                else if (isGeneralQuery)
                {
                    isRelevant = IsSkincareProduct(productName, productDescription, categoryName) ||
                                IsMakeupProduct(productName, productDescription, categoryName);
                }
                else
                {
                    isRelevant = MatchesSpecificKeywords(product, lowerMessage);
                }

                if (isRelevant)
                {
                    relevantProducts.Add(product);
                }
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o v√† l√† c√¢u h·ªèi chung (KH√îNG c√≥ brand specified), tr·∫£ v·ªÅ m·ªôt s·ªë s·∫£n ph·∫©m skincare
            if (!relevantProducts.Any() && (isGeneralQuery || isSkincareQuery) && products.Any() && string.IsNullOrEmpty(requestedBrand))
            {
                foreach (var product in products)
                {
                    var productName = product.Name.ToLower();
                    var productDescription = (product.Description ?? "").ToLower();
                    var categoryName = product.Category?.Name?.ToLower() ?? "";

                    if (IsSkincareProduct(productName, productDescription, categoryName))
                    {
                        relevantProducts.Add(product);
                        if (relevantProducts.Count >= 6) break;
                    }
                }
            }

            // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr·∫£ v·ªÅ (t·ªëi ƒëa 6 s·∫£n ph·∫©m)
            return relevantProducts.Take(6).ToList();
        }

        /// <summary>
        /// Detect brand name t·ª´ message
        /// </summary>
        private string? DetectBrandFromMessage(string lowerMessage)
        {
            // Brand mapping: t·ª´ trong message -> brand name trong database
            var brandMappings = new Dictionary<string, string>
            {
                // Database brands (exact matches t·ª´ SQL screenshots)
                { "nivea", "Nivea" },
                { "l'oreal", "L'Oreal Paris" },
                { "loreal", "L'Oreal Paris" },
                { "l'oreal paris", "L'Oreal Paris" },
                { "chanel", "Chanel" },
                { "mac", "MAC Cosmetics" },
                { "mac cosmetics", "MAC Cosmetics" },
                { "est√©e lauder", "Est√©e Lauder" },
                { "estee lauder", "Est√©e Lauder" },
                
                // Additional fallback variations
                { "l'or√©al", "L'Oreal Paris" },
                { "lor√©al", "L'Oreal Paris" }
            };

            // T√¨m brand longest match first ƒë·ªÉ tr√°nh conflicts
            var sortedBrands = brandMappings.Keys.OrderByDescending(k => k.Length);
            
            foreach (var brandKeyword in sortedBrands)
            {
                if (lowerMessage.Contains(brandKeyword))
                {
                    return brandMappings[brandKeyword]; // Return DB brand name
                }
            }

            return null;
        }

        /// <summary>
        /// Ki·ªÉm tra product c√≥ match v·ªõi purpose kh√¥ng
        /// </summary>
        private bool ProductMatchesPurpose(Cosmetics.Models.Product product, string purpose, string productName, string productDescription, string categoryName)
        {
            switch (purpose.ToLower())
            {
                case "ch·ªëng l√£o h√≥a":
                    return IsAntiAgingProduct(productName, productDescription, categoryName);

                case "d∆∞·ª°ng ·∫©m":
                    return IsMoisturizingProduct(productName, productDescription, categoryName);

                case "l√†m tr·∫Øng":
                    return IsWhiteningProduct(productName, productDescription, categoryName);

                case "ch·ªëng n·∫Øng":
                    return IsSunscreenProduct(productName, productDescription, categoryName);

                case "tr·ªã m·ª•n":
                    return IsAcneTreatmentProduct(productName, productDescription, categoryName);

                case "l√†m s·∫°ch":
                    return IsCleansingProduct(productName, productDescription, categoryName);

                default:
                    return false;
            }
        }

        // Helper methods for purpose matching
        private bool IsAntiAgingProduct(string name, string description, string category)
        {
            var antiAgingKeywords = new[]
            {
                "anti-aging", "ch·ªëng l√£o h√≥a", "anti aging", "wrinkle", "n·∫øp nhƒÉn",
                "serum", "retinol", "vitamin c", "collagen", "peptide", "firming",
                "lifting", "renewal", "regenerating", "youth", "age", "mature skin"
            };

            var text = $"{name} {description} {category}";
            return antiAgingKeywords.Any(keyword => text.Contains(keyword)) &&
                   !IsMakeupProduct(name, description, category); // Exclude makeup products
        }

        private bool IsMoisturizingProduct(string name, string description, string category)
        {
            var moisturizingKeywords = new[]
            {
                "moisturizer", "d∆∞·ª°ng ·∫©m", "c·∫•p ·∫©m", "hydrating", "hydra", "moisture",
                "cream", "kem d∆∞·ª°ng", "lotion", "emulsion", "hyaluronic", "ceramide"
            };

            var text = $"{name} {description} {category}";
            return moisturizingKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsWhiteningProduct(string name, string description, string category)
        {
            var whiteningKeywords = new[]
            {
                "whitening", "l√†m tr·∫Øng", "brightening", "s√°ng da", "vitamin c",
                "niacinamide", "arbutin", "kojic", "spot corrector", "ƒë·ªÅu m√†u da"
            };

            var text = $"{name} {description} {category}";
            return whiteningKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsSunscreenProduct(string name, string description, string category)
        {
            var sunscreenKeywords = new[]
            {
                "sunscreen", "ch·ªëng n·∫Øng", "spf", "sun protection", "uv protection",
                "broad spectrum", "pa++", "zinc oxide", "titanium dioxide"
            };

            var text = $"{name} {description} {category}";
            return sunscreenKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsAcneTreatmentProduct(string name, string description, string category)
        {
            var acneKeywords = new[]
            {
                "acne", "m·ª•n", "blemish", "spot treatment", "salicylic acid",
                "benzoyl peroxide", "tea tree", "anti-bacterial", "pore minimizing"
            };

            var text = $"{name} {description} {category}";
            return acneKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsCleansingProduct(string name, string description, string category)
        {
            var cleansingKeywords = new[]
            {
                "cleanser", "cleansing", "t·∫©y trang", "r·ª≠a m·∫∑t", "l√†m s·∫°ch",
                "makeup remover", "micellar", "cleansing oil", "foam cleanser",
                "gel cleanser", "cream cleanser"
            };

            var text = $"{name} {description} {category}";
            return cleansingKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsSkincareProduct(string name, string description, string category)
        {
            var skincareKeywords = new[]
            {
                "cream", "kem", "serum", "toner", "cleanser", "moisturizer", "lotion",
                "facial", "face", "skin", "da", "d∆∞·ª°ng", "chƒÉm s√≥c da", "skincare",
                "r·ª≠a m·∫∑t", "t·∫©y trang", "d∆∞·ª°ng ·∫©m", "ch·ªëng n·∫Øng", "anti-aging",
                "hydrating", "cleansing", "night cream", "day cream"
            };

            var text = $"{name} {description} {category}";
            return skincareKeywords.Any(keyword => text.Contains(keyword)) &&
                   !IsHaircareProduct(name, description, category) &&
                   !IsFragranceProduct(name, description, category);
        }

        private bool IsHaircareProduct(string name, string description, string category)
        {
            var haircareKeywords = new[]
            {
                "shampoo", "g·ªôi", "x·∫£", "conditioner", "hair", "t√≥c", "d∆∞·ª°ng t√≥c",
                "chƒÉm s√≥c t√≥c", "haircare", "volumizing"
            };

            var text = $"{name} {description} {category}";
            return haircareKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsMakeupProduct(string name, string description, string category)
        {
            var makeupKeywords = new[]
            {
                "lipstick", "son", "mascara", "foundation", "ph·∫•n", "makeup",
                "trang ƒëi·ªÉm", "rouge", "blush", "eyeshadow", "concealer"
            };

            var text = $"{name} {description} {category}";
            return makeupKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool IsFragranceProduct(string name, string description, string category)
        {
            var fragranceKeywords = new[]
            {
                "perfume", "n∆∞·ªõc hoa", "fragrance", "cologne", "eau de",
                "parfum", "scent"
            };

            var text = $"{name} {description} {category}";
            return fragranceKeywords.Any(keyword => text.Contains(keyword));
        }

        private bool MatchesSpecificKeywords(Cosmetics.Models.Product product, string message)
        {
            var productName = product.Name.ToLower();
            var productDescription = (product.Description ?? "").ToLower();
            var categoryName = product.Category?.Name?.ToLower() ?? "";
            var brandName = product.Brand?.Name?.ToLower() ?? "";

            // Ki·ªÉm tra t·ª´ kh√≥a trong t√™n s·∫£n ph·∫©m
            if (productName.Contains(message) ||
                message.Split(' ').Any(word => word.Length > 2 && productName.Contains(word)))
            {
                return true;
            }

            // Ki·ªÉm tra t·ª´ kh√≥a trong m√¥ t·∫£
            if (productDescription.Contains(message) ||
                message.Split(' ').Any(word => word.Length > 2 && productDescription.Contains(word)))
            {
                return true;
            }

            // Ki·ªÉm tra t·ª´ kh√≥a trong danh m·ª•c
            if (categoryName.Contains(message) ||
                message.Split(' ').Any(word => word.Length > 2 && categoryName.Contains(word)))
            {
                return true;
            }

            // Ki·ªÉm tra t·ª´ kh√≥a trong th∆∞∆°ng hi·ªáu
            if (brandName.Contains(message) ||
                message.Split(' ').Any(word => word.Length > 2 && brandName.Contains(word)))
            {
                return true;
            }

            return false;
        }

        private string CreateProductResponse(List<Cosmetics.Models.Product> products, string originalMessage)
        {
            if (!products.Any())
            {
                return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. Vui l√≤ng th·ª≠ v·ªõi t·ª´ kh√≥a kh√°c.";
            }

            var lowerMessage = originalMessage.ToLower();
            var skinType = DetectSkinType(originalMessage);
            var purposes = DetectPurposes(originalMessage);

            // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi chung kh√¥ng
            var generalKeywords = new[] { "skincare", "s·∫£n ph·∫©m", "m·ªπ ph·∫©m", "l√†m ƒë·∫πp", "chƒÉm s√≥c da", "gi·ªõi thi·ªáu" };
            var isGeneralQuery = generalKeywords.Any(keyword => lowerMessage.Contains(keyword));

            var response = "";

            if (isGeneralQuery)
            {
                response = "M·ªôt s·ªë s·∫£n ph·∫©m ph·ªï bi·∫øn:\n\n";
            }
            else
            {
                response = "S·∫£n ph·∫©m ph√π h·ª£p";

                if (skinType != null)
                {
                    response += $" cho {skinType}";
                }

                if (purposes.Any())
                {
                    response += $" v·ªõi m·ª•c ƒë√≠ch {string.Join(", ", purposes)}";
                }

                response += ":\n\n";
            }

            for (int i = 0; i < products.Count && i < 5; i++) // Gi·ªõi h·∫°n 5 s·∫£n ph·∫©m
            {
                var product = products[i];
                var price = product.Price.ToString("N0", new CultureInfo("vi-VN"));
                response += $"{i + 1}. {product.Name} - {price}ƒë\n";

                // Th√™m th√¥ng tin ng·∫Øn g·ªçn
                var productInfo = new List<string>();
                if (product.Brand?.Name != null)
                {
                    productInfo.Add(product.Brand.Name);
                }
                if (product.Category?.Name != null)
                {
                    productInfo.Add(product.Category.Name);
                }
                if (productInfo.Any())
                {
                    response += $"   {string.Join(" - ", productInfo)}\n";
                }

                // M√¥ t·∫£ ng·∫Øn g·ªçn h∆°n
                if (!string.IsNullOrEmpty(product.Description))
                {
                    string desc = product.Description;
                    if (desc.Length > 50)
                    {
                        desc = desc.Substring(0, 50) + "...";
                    }
                    response += $"   {desc}\n";
                }
                response += "\n";
            }

            response += "Nh·∫•n v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt.";

            return response;
        }

        // C√°c ph∆∞∆°ng th·ª©c h·ªó tr·ª£ cho t√≠nh nƒÉng m·ªü r·ªông
        private bool IsSearchMoreRequest(string message)
        {
            var keywords = new[] { "th√™m th√¥ng tin", "more info", "t√¨m ki·∫øm th√™m", "search more", "google" };
            return keywords.Any(keyword => message.ToLower().Contains(keyword));
        }

        private bool IsSimilarProductRequest(string message)
        {
            var keywords = new[] { "t∆∞∆°ng t·ª±", "gi·ªëng", "nh∆∞", "so s√°nh", "thay th·∫ø", "alternative", "similar" };
            return keywords.Any(keyword => message.ToLower().Contains(keyword));
        }

        private bool IsSearchAnotherMoreRequest(string message)
        {
            var keywords = new[] { "s·∫£n ph·∫©m kh√°c", "option kh√°c", "l·ª±a ch·ªçn kh√°c", "c√≥ g√¨ kh√°c", "th√™m n·ªØa", "more" };
            return keywords.Any(keyword => message.ToLower().Contains(keyword));
        }

        private async Task<ChatbotResponseDto> HandleSearchMoreRequest(string message, string originalQuery, string sessionId)
        {
            // Placeholder cho t√≠nh nƒÉng t√¨m ki·∫øm Google
            return new ChatbotResponseDto
            {
                Message = "T√≠nh nƒÉng t√¨m ki·∫øm Google ƒëang ph√°t tri·ªÉn. Vui l√≤ng th·ª≠ l·∫°i sau.",
                Products = new List<Cosmetics.Models.Product>(),
                HasProducts = false,
                IsSearchResult = true,
                Context = sessionId
            };
        }

        private async Task<ChatbotResponseDto> FindSimilarProducts(string productName, string sessionId)
        {
            // Placeholder cho t√≠nh nƒÉng t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±
            return new ChatbotResponseDto
            {
                Message = "T√≠nh nƒÉng t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± ƒëang ph√°t tri·ªÉn.",
                Products = new List<Cosmetics.Models.Product>(),
                HasProducts = false,
                SimilarProducts = new List<SimilarProductDto>(),
                HasSimilarProducts = false,
                Context = sessionId
            };
        }

        private async Task<ChatbotResponseDto> FindMoreSimilarProducts(string message, string sessionId)
        {
            // Placeholder cho t√≠nh nƒÉng t√¨m th√™m s·∫£n ph·∫©m t∆∞∆°ng t·ª±
            return new ChatbotResponseDto
            {
                Message = "T√≠nh nƒÉng n√†y ƒëang ph√°t tri·ªÉn.",
                Products = new List<Cosmetics.Models.Product>(),
                HasProducts = false,
                SimilarProducts = new List<SimilarProductDto>(),
                HasSimilarProducts = false,
                Context = sessionId
            };
        }

        // Context management
        private ChatSessionContextDto GetSessionContext(string sessionId)
        {
            var cacheKey = $"chatbot_context_{sessionId}";
            return _cache.GetOrCreate(cacheKey, entry =>
            {
                entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromHours(2); // Context expires after 2 hours
                return new ChatSessionContextDto { SessionId = sessionId };
            });
        }

        private void SaveSessionContext(string sessionId, ChatSessionContextDto context)
        {
            var cacheKey = $"chatbot_context_{sessionId}";
            _cache.Set(cacheKey, context, TimeSpan.FromHours(2));
        }

        public void ResetContext(string sessionId)
        {
            var cacheKey = $"chatbot_context_{sessionId}";
            _cache.Remove(cacheKey);
        }
    }
} 